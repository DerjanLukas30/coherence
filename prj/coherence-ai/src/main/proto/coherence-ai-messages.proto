/*
 * Copyright (c) 2000, 2024, Oracle and/or its affiliates.
 *
 * Licensed under the Universal Permissive License v 1.0 as shown at
 * https://oss.oracle.com/licenses/upl.
 */

// Coherence AI message types
//
syntax = "proto3";

package coherence.ai;

option java_multiple_files = true;
option java_package = "com.oracle.coherence.ai.grpc";

// An identifier for a vector store
message StoreId {
    // The name of the vector store.
    string store = 1;
    // The scope name to use to obtain the vector store.
    optional string scope = 2;
    // The serialization format used by the client.
    optional string format = 3;
}


// An enum representing the endian type of a number.
enum Endian {
    Big = 0;
    Little = 1;
}

// An enum representing different vector types.
enum DataType {
    Float = 0;
    Double = 1;
    Int = 2;
    Long = 3;
}

// A vector in a vector store
message Vector {
    // The key for the vector.
    optional bytes key = 1;
    // The metadata for the vector.
    optional bytes metadata = 2;
    // The vector data.
    oneof vector_data {
        RawVector    raw_vector    = 10;
        DoubleVector double_vector = 12;
        FloatVector  float_vector  = 13;
        IntVector    int_vector    = 14;
        LongVector   long_vector   = 15;
    }
}

// A vector made up of raw bytes.
message RawVector {
    // The vector data, which is the bytes of an array of the specified data type.
    bytes data = 1;
    // The vector indexes if the vector is a sparse vector.
    // The number of index values should equal data size divided by the size of the data type
    repeated int32 indexes = 2;
    // The data type the vector contains, if omitted the data type is assumed to be floats.
    optional DataType type = 4;
    // Whether the data is big-endian or little-endian.
    optional Endian endian = 5;
}

// A vector of doubles.
message DoubleVector {
    // The vector data.
    repeated double data = 1 [packed=true];
    // The vector indexes if the vector is a sparse vector.
    repeated int32 indexes = 2;
}

// A vector of floats.
message FloatVector {
    // The vector data.
    repeated float data = 1 [packed=true];
    // The vector indexes if the vector is a sparse vector.
    repeated int32 indexes = 2;
}

// A vector of 32 bit integers (Java int).
message IntVector {
    // The vector data.
    repeated int32 data = 1 [packed=true];
    // The vector indexes if the vector is a sparse vector.
    repeated int32 indexes = 2;
}

// A vector of 64 bit integers (Java long)
message LongVector {
    // The vector data.
    repeated int64 data = 1 [packed=true];
    // The vector indexes if the vector is a sparse vector.
    repeated int32 indexes = 2;
}

// Multiple Vector instances in a single message
message Vectors {
    repeated Vector vector = 1;
}

// Get a vector from the store.
message GetVectorRequest {
    // The identifier for the store.
    StoreId storeId = 1;
    // The key of the vector
    bytes key = 2;
}

// A message that may contain a vector
message OptionalVector {
    // true if this message contains a vector
    bool present = 1;
    // The optional vector
    optional Vector vector = 2;
}

/*
A message to add vectors to a store.
Use by the VectorService unary add method.
 */
message AddRequest {
    // The identifier for the store.
    StoreId storeId = 1;
    // The vectors to add.
    Vectors vectors = 2;
}

/*
A message to add vectors to a store.
Use by the VectorService client streaming upload method.
The client must first send an UploadStart message followed
by one or more vectors. When all the vectors have been
uploaded the client should close the stream.
 */
message UploadRequest {
    oneof request {
        // A start message, this must be sent first.
        UploadStart start = 1;
        // The vector message, multiple vectors can be sent after the start message.
        Vectors vectors = 2;
    }
}

/*
The first message sent as part of an UploadRequest stream.
 */
message UploadStart {
    // The identifier for the store
    StoreId storeId = 1;
}

// A request to clear all the entries in the vector store.
message ClearRequest {
    // The identifier for the store
    StoreId storeId = 1;
}

// A request to destroy a vector store.
message DestroyRequest {
    // The identifier for the store
    StoreId storeId = 1;
}

message SimilarityQuery {
    StoreId storeId = 1;
    // The maximum number of results to return.
    int32 maxResults = 2;
    // Whether to include metadata in the results.
    bool includeMetadata = 3;
    // An extractor to use to extract values from the metadata
    bytes extractor = 4;
    // Whether to include the vector data in the results.
    bool includeVector = 5;
    // Whether to include the vector key in the results.
    bool includeKey = 6;
    // The serialized Filter to use in the query
    bytes filter = 7;
    // The distance algorithm to use
    string distance = 8;
    // The query parameters as JSON
    bytes parameters = 9;
}

message QueryResult {
    float result = 1;
    optional bytes vector = 2;
    repeated int32 indexes = 3;
    optional bytes key = 4;
    optional bytes metadata = 5;
}
